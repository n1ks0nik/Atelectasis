import os
import requests
import time
import json
from pathlib import Path
import base64

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:8000"  # –ê–¥—Ä–µ—Å API Gateway
TEST_TOKEN = "test-jwt-token-12345"  # –¢–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω

# –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
# SCRIPT_DIR = Path(__file__).parent
TEST_PNG_PATH = "test.png"  # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É PNG
TEST_DICOM_PATH = "dicom.dcm"  # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É DICOM


def create_test_dicom_from_png():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π DICOM —Ñ–∞–π–ª –∏–∑ PNG –∏—Å–ø–æ–ª—å–∑—É—è API
    """
    print("üîß Creating test DICOM from PNG...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PNG —Ñ–∞–π–ª–∞
    if not TEST_PNG_PATH.exists():
        print(f"‚ùå PNG file not found at {TEST_PNG_PATH}")
        print("Creating a dummy PNG for testing...")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        import numpy as np
        from PIL import Image

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        TEST_PNG_PATH.parent.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1024x1024 (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–Ω—Ç–≥–µ–Ω–∞)
        img_array = np.zeros((1024, 1024), dtype=np.uint8)
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏ —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        for i in range(1024):
            for j in range(1024):
                img_array[i, j] = int(255 * (0.3 + 0.4 * (i / 1024) + 0.3 * np.random.random()))

        # –î–æ–±–∞–≤–ª—è–µ–º "—Ç–µ–Ω—å" –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–µ–≥–∫–∏—Ö
        img_array[300:700, 200:400] = img_array[300:700, 200:400] * 0.7
        img_array[300:700, 600:800] = img_array[300:700, 600:800] * 0.7

        img = Image.fromarray(img_array, mode='L')
        img.save(TEST_PNG_PATH)
        print(f"‚úÖ Created test PNG at {TEST_PNG_PATH}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ DICOM
    with open(TEST_PNG_PATH, 'rb') as f:
        files = {'png_file': ('test_chest.png', f, 'image/png')}
        response = requests.post(
            f"{API_URL}/test/create_dicom",
            files=files,
            params={'add_patient_info': True}
        )

    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ DICOM created: {result}")
        return result.get('dicom_path')
    else:
        print(f"‚ùå Failed to create DICOM: {response.status_code}")
        print(response.text)
        return None


def test_health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    """
    print("\nüè• Testing health check...")

    response = requests.get(f"{API_URL}/health")

    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Health check passed:")
        print(f"   Status: {data['status']}")
        print(f"   Kafka connected: {data['kafka_connected']}")
        print(f"   Timestamp: {data['timestamp']}")
        return True
    else:
        print(f"‚ùå Health check failed: {response.status_code}")
        return False


def test_analyze_dicom(dicom_path=None):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\nüîç Testing DICOM analysis...")

    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DICOM
    if not dicom_path:
        dicom_path = TEST_DICOM_PATH

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not Path(dicom_path).exists():
        print(f"‚ùå DICOM file not found at {dicom_path}")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–∑ PNG
        print("Attempting to create DICOM from PNG...")
        created_path = create_test_dicom_from_png()
        if created_path:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            import shutil
            TEST_DICOM_PATH.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(created_path, TEST_DICOM_PATH)
            dicom_path = TEST_DICOM_PATH
        else:
            return None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DICOM –Ω–∞ –∞–Ω–∞–ª–∏–∑
    with open(dicom_path, 'rb') as f:
        files = {'file': ('test.dcm', f, 'application/dicom')}
        headers = {'Authorization': f'Bearer {TEST_TOKEN}'}

        print(f"üì§ Uploading {dicom_path}...")
        response = requests.post(
            f"{API_URL}/analyze",
            files=files,
            headers=headers
        )

    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Analysis started:")
        print(f"   Study ID: {result['study_id']}")
        print(f"   Status: {result['status']}")
        print(f"   Message: {result['message']}")
        return result['study_id']
    else:
        print(f"‚ùå Analysis failed: {response.status_code}")
        print(f"   Error: {response.text}")
        return None


def test_get_result(study_id):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    print(f"\nüìä Getting result for study_id: {study_id}")

    headers = {'Authorization': f'Bearer {TEST_TOKEN}'}

    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    max_attempts = 30
    for attempt in range(max_attempts):
        response = requests.get(
            f"{API_URL}/result/{study_id}",
            headers=headers
        )

        if response.status_code == 200:
            result = response.json()

            if result.get('status') == 'completed':
                print(f"‚úÖ Analysis completed!")
                print(f"   Results: {json.dumps(result, indent=2)}")
                return True
            elif result.get('status') == 'processing':
                print(f"‚è≥ Still processing... (attempt {attempt + 1}/{max_attempts})")
                time.sleep(2)
            else:
                print(f"‚ùì Unexpected status: {result.get('status')}")
                print(f"   Full response: {json.dumps(result, indent=2)}")
                time.sleep(2)
        else:
            print(f"‚ùå Failed to get result: {response.status_code}")
            print(response.text)
            return False

    print("‚è±Ô∏è Timeout waiting for result")
    return False


def test_storage_service(study_id):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã storage service —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    print("\nüíæ Testing Storage Service functionality...")

    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É storage service
    print("‚è≥ Waiting for storage service to process results...")
    time.sleep(3)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    reports_dir = Path("./reports")  # –ü—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å REPORTS_DIR –≤ storage service

    checks = {
        "JSON Report": reports_dir / "json" / f"{study_id}_report.json",
        "API JSON": reports_dir / "json_api" / f"{study_id}_api.json",
        "DICOM SR": reports_dir / "dicom_sr" / f"{study_id}_sr.dcm"
    }

    all_passed = True

    for report_type, file_path in checks.items():
        if file_path.exists():
            print(f"‚úÖ {report_type} created: {file_path}")

            # –î–ª—è JSON —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if file_path.suffix == '.json':
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)

                    if report_type == "JSON Report":
                        print(f"   - Status: {data.get('status')}")
                        print(f"   - Atelectasis probability: {data.get('atelectasis_probability', 0):.2%}")
                        if data.get('bbox'):
                            print(f"   - Bounding box: {data.get('bbox')}")
                        print(f"   - Conclusion: {data.get('conclusion', 'N/A')[:100]}...")

                    elif report_type == "API JSON":
                        print(f"   - API version: {data.get('api_version')}")
                        print(f"   - Report type: {data.get('report_type')}")
                        if data.get('localization'):
                            loc = data['localization']
                            print(
                                f"   - Localization: [{loc.get('xmin')}, {loc.get('ymin')}, {loc.get('xmax')}, {loc.get('ymax')}]")

                except Exception as e:
                    print(f"   ‚ö†Ô∏è Error reading {report_type}: {e}")

            elif report_type == "DICOM SR":
                print(f"   - File size: {file_path.stat().st_size} bytes")
        else:
            print(f"‚ùå {report_type} NOT found at: {file_path}")
            all_passed = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if not file_path.parent.exists():
                print(f"   ‚ö†Ô∏è Directory doesn't exist: {file_path.parent}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ storage service
    storage_log_indicators = [
        "JSON report saved",
        "API JSON report generated",
        "Result successfully stored"
    ]

    print("\nüìã Storage Service indicators to check in logs:")
    for indicator in storage_log_indicators:
        print(f"   - Look for: '{indicator}'")

    return all_passed


def test_multiple_studies():
    """
    –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """
    print("\nüîÑ Testing multiple studies processing...")

    study_ids = []

    # –°–æ–∑–¥–∞–µ–º 3 –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    for i in range(3):
        print(f"\n--- Study {i + 1}/3 ---")
        study_id = test_analyze_dicom()
        if study_id:
            study_ids.append(study_id)
            print(f"‚úÖ Study {i + 1} started: {study_id}")
            time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        else:
            print(f"‚ùå Failed to start study {i + 1}")

    if not study_ids:
        print("‚ùå No studies were created successfully")
        return

    print(f"\nüìä Created {len(study_ids)} studies, waiting for processing...")
    time.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    successful_studies = []
    for study_id in study_ids:
        print(f"\n--- Checking study: {study_id} ---")
        headers = {'Authorization': f'Bearer {TEST_TOKEN}'}
        response = requests.get(f"{API_URL}/result/{study_id}", headers=headers)

        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Got result for {study_id}: {result.get('status')}")
            if result.get('status') == 'completed':
                successful_studies.append(study_id)
        else:
            print(f"‚ùå Failed to get result for {study_id}")

    print(f"\nüìà Summary: {len(successful_studies)}/{len(study_ids)} studies completed successfully")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    if successful_studies:
        print("\nüíæ Checking storage for all successful studies...")
        for study_id in successful_studies:
            test_storage_service(study_id)


def run_full_test():
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
    """
    print("üöÄ Starting full system test...\n")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health
    if not test_health_check():
        print("‚ùå System is not healthy, stopping tests")
        return

    # 2. –ê–Ω–∞–ª–∏–∑ DICOM
    study_id = test_analyze_dicom()
    if not study_id:
        print("‚ùå Failed to start analysis, stopping tests")
        return

    # 3. –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\n‚è≥ Waiting for processing to complete...")
    time.sleep(5)

    if test_get_result(study_id):
        print("\n‚úÖ Analysis completed successfully!")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ storage service
        if test_storage_service(study_id):
            print("\n‚úÖ Storage Service test passed!")
        else:
            print("\n‚ö†Ô∏è Storage Service test partially failed")
    else:
        print("\n‚ùå Analysis failed")


def test_invalid_file():
    """
    –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º
    """
    print("\nüß™ Testing invalid file upload...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ DICOM
    with open("test.txt", "w") as f:
        f.write("This is not a DICOM file")

    try:
        with open("test.txt", 'rb') as f:
            files = {'file': ('test.txt', f, 'text/plain')}
            headers = {'Authorization': f'Bearer {TEST_TOKEN}'}

            response = requests.post(
                f"{API_URL}/analyze",
                files=files,
                headers=headers
            )

        print(f"Response status: {response.status_code}")
        print(f"Response: {response.text}")

        if response.status_code == 400:
            print("‚úÖ Invalid file correctly rejected")
        else:
            print("‚ùå Invalid file should have been rejected")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists("test.txt"):
            os.remove("test.txt")


def test_missing_auth():
    """
    –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    print("\nüîê Testing missing authentication...")

    # –°–æ–∑–¥–∞–µ–º dummy —Ñ–∞–π–ª
    with open("dummy.dcm", "wb") as f:
        f.write(b"DUMMY")

    try:
        with open("dummy.dcm", 'rb') as f:
            files = {'file': ('dummy.dcm', f, 'application/dicom')}
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
            response = requests.post(
                f"{API_URL}/analyze",
                files=files
            )

        print(f"Response status: {response.status_code}")

        if response.status_code == 403 or response.status_code == 401:
            print("‚úÖ Unauthorized request correctly rejected")
        else:
            print("‚ùå Unauthorized request should have been rejected")
            print(f"Response: {response.text}")

    finally:
        if os.path.exists("dummy.dcm"):
            os.remove("dummy.dcm")


def check_system_statistics():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π endpoint)
    """
    print("\nüìä Checking system statistics...")

    # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω endpoint –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤

    reports_dir = Path("./reports")

    if reports_dir.exists():
        json_count = len(list((reports_dir / "json").glob("*.json"))) if (reports_dir / "json").exists() else 0
        api_json_count = len(list((reports_dir / "json_api").glob("*.json"))) if (
                    reports_dir / "json_api").exists() else 0
        dicom_sr_count = len(list((reports_dir / "dicom_sr").glob("*.dcm"))) if (
                    reports_dir / "dicom_sr").exists() else 0

        print(f"üìÅ Storage statistics:")
        print(f"   - JSON reports: {json_count}")
        print(f"   - API JSON reports: {api_json_count}")
        print(f"   - DICOM SR files: {dicom_sr_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        if json_count == api_json_count:
            print("‚úÖ Report counts are consistent")
        else:
            print("‚ö†Ô∏è Report counts mismatch - possible processing issues")
    else:
        print("‚ùå Reports directory not found")


def interactive_menu():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    while True:
        print("\n" + "=" * 50)
        print("üß™ ATELECTASIS DETECTION SYSTEM TEST MENU")
        print("=" * 50)
        print("1. Run full test suite (including storage)")
        print("2. Test health check only")
        print("3. Test DICOM analysis")
        print("4. Test invalid file handling")
        print("5. Test missing authentication")
        print("6. Create test DICOM from PNG")
        print("7. Test multiple studies")
        print("8. Check system statistics")
        print("9. Test storage service only (requires study_id)")
        print("0. Exit")
        print("=" * 50)

        choice = input("Select option: ")

        if choice == "1":
            run_full_test()
        elif choice == "2":
            test_health_check()
        elif choice == "3":
            study_id = test_analyze_dicom()
            if study_id:
                input("\nPress Enter to check result...")
                if test_get_result(study_id):
                    input("\nPress Enter to test storage service...")
                    test_storage_service(study_id)
        elif choice == "4":
            test_invalid_file()
        elif choice == "5":
            test_missing_auth()
        elif choice == "6":
            create_test_dicom_from_png()
        elif choice == "7":
            test_multiple_studies()
        elif choice == "8":
            check_system_statistics()
        elif choice == "9":
            study_id = input("Enter study_id to check: ").strip()
            if study_id:
                test_storage_service(study_id)
            else:
                print("‚ùå Invalid study_id")
        elif choice == "0":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid option")

        input("\nPress Enter to continue...")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Test Atelectasis Detection System')
    parser.add_argument('--auto', action='store_true', help='Run automatic full test')
    parser.add_argument('--api-url', default='http://localhost:8000', help='API Gateway URL')
    parser.add_argument('--token', default='test-jwt-token-12345', help='JWT token for auth')
    parser.add_argument('--multi', action='store_true', help='Run multiple studies test')

    args = parser.parse_args()

    API_URL = args.api_url
    TEST_TOKEN = args.token

    if args.auto:
        run_full_test()
    elif args.multi:
        test_multiple_studies()
    else:
        interactive_menu()